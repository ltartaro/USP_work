import numpy as np

np.set_printoptions(suppress=True)

# -----RECEBENDO ENTRADAS----- #

#Questao 1
M_1 = np.array([[0.1,   0.6,   0.6],
                [0.3,   0.2,   0. ],
                [0.3,   0.1,   0.1]])

L_T_M_1 = np.identity(3) - M_1 #Funcao np.identity(n) gera vetor identidade de tamanho nxn

#Questão 1_a
d_a = np.array([[0.,100.,0.]]).T #.T transpõe a matriz
eq_1_a = np.concatenate((L_T_M_1, d_a),axis=1)

#Questão 1_b

L_M_1 = np.linalg.inv(L_T_M_1) # inversão de matrizes 

#Questão 1_c
d_c = np.array([[0.,18.,0.]]).T
eq_1_c = np.concatenate((L_T_M_1, d_c),axis=1) #Funcao np.concatenate(A,B) junta duas matrizes

#Questão 2

M_2 = np.array([[0.1588, 0.0064, 0.0025, 0.0304, 0.0014, 0.0083, 0.1594],
                [0.0057, 0.2645, 0.0436, 0.0099, 0.0083, 0.0201, 0.3413],
                [0.0264, 0.1506, 0.3557, 0.0139, 0.0142, 0.0070, 0.0236],
                [0.3299, 0.0565, 0.0495, 0.3636, 0.0204, 0.0483, 0.0649],
                [0.0089, 0.0081, 0.0333, 0.0295, 0.3412, 0.0237, 0.0020],
                [0.1190, 0.0901, 0.0996, 0.1260, 0.1722, 0.2368, 0.3369],
                [0.0063, 0.0126, 0.0196, 0.0098, 0.0064, 0.0132, 0.0012]])

L_T_M_2 = np.identity(7) - M_2

d_1958 = np.array([[74000, 56000, 10500, 25000, 17500, 196000, 5000]]).T

eq_1958 = np.concatenate((L_T_M_2, d_1958),axis=1)

d_1964 = np.array([[99640, 75548, 14444, 33501, 23527, 263985, 6526]]).T

eq_1964 = np.concatenate((L_T_M_2, d_1964),axis=1)

#Questão 3 (retirada da tabela do IBGE 2015)

M_3 =  np.array([[0.040534,	 0.000525,	 0.076449,	 0.000463,	 0.002559,	 0.009148,	 
                  0.000568,	 0.000240,	 0.000063,	 0.000055,	 0.004331,	 0.001568],
                 [0.001103,	 0.054401,	 0.042078,	 0.014914,	 0.011188,	 0.000189,	 
                  0.000284,	 0.000289,	 0.000079,	 0.000628,	 0.000206,	 0.000294],
                 [0.206423,	 0.110895,	 0.273069,	 0.075993,	 0.205220,	 0.057381,	 
                  0.182535,	 0.027949,	 0.009686,	 0.009289,	 0.071106,	 0.025899],
                 [0.023301,	 0.010808,	 0.015456,	 0.275760,	 0.001163,	 0.017589,	 
                  0.005740,	 0.007240,	 0.004113,	 0.001260,	 0.016649,	 0.017256],
                 [0.000593,	 0.012571,	 0.000917,	 0.012761,	 0.093540,	 0.001035,	 
                  0.003140,	 0.016369,	 0.002983,	 0.002921,	 0.003560,	 0.013924],
                 [0.059395,	 0.031210,	 0.078902,	 0.020163,	 0.057718,	 0.027505,	 
                  0.046994,	 0.024987,	 0.005934,	 0.003261,	 0.032101,	 0.013314],
                 [0.019994,	 0.083783,	 0.049323,	 0.018609,	 0.011905,	 0.050342,	 
                  0.112531,	 0.009640,	 0.014215,	 0.000854,	 0.018313,	 0.011773],
                 [0.000202,	 0.003879,	 0.005630,	 0.006543,	 0.002254,	 0.013108,	 
                  0.007642,	 0.120958,	 0.039273,	 0.001420,	 0.038000,	 0.017332],
                 [0.015253,	 0.022242,	 0.017559,	 0.021695,	 0.014285,	 0.023598,	 
                  0.024778,	 0.029116,	 0.124073,	 0.037904,	 0.017001,	 0.044628],
                 [0.000036,	 0.001358,	 0.001831,	 0.004295,	 0.001681,	 0.033814,	 
                  0.006732,	 0.012231,	 0.009615,	 0.002742,	 0.017499,	 0.003605],
                 [0.003692,	 0.092965,	 0.045852,	 0.050633,	 0.023314,	 0.079918,	 
                  0.057673,	 0.140587,	 0.101802,	 0.007998,	 0.090339,	 0.078202],
                 [0.000741,	 0.004864,	 0.002799,	 0.004594,	 0.001173,	 0.004107,	 
                  0.003890,	 0.006317,	 0.004483,	 0.000377,	 0.004164,	 0.003469]])

L_M_3 = np.linalg.inv((np.identity(12) - M_3))

#teste_do_vini=np.linalg.inv((np.identity(12) - L_M_3))

"""
Este programa resolverá equações como no exemplo abaixo, com n equações e n incógnitas:

[0.5   -0.4  -0.2] [X1] = [50]
[-0.2  0.7   -0.1] [X2] = [30]
[-0.1  -0.1   0.7] [X3] = [20]

- Utilizaremos o metodo de Eliminacao de Gauss usando pivotamento parcial.
- O programa é capaz de resolver sistemas de n equacoes e n incógnitas.
- Para isso, reescreveremos o sistema acima na forma de uma matriz de
  tamanho de n linhas e (n+1) colunas, como a seguir:

[0.5   -0.4  -0.2  50]
[-0.2  0.7   -0.1  30]
[-0.1  -0.1   0.7  20]     
      
"""


#Irei definir uma função que determina o valor maximo em um vetor e sua posicao
def max_val(vetor):
    val_max = vetor[0]
    posicao = 0
    for i in range(1,len(vetor)):
       if(vetor[i]>val_max):
           val_max=vetor[i]
           posicao = i
    return(val_max,posicao)

#Nao esquecer que as matrizes sao da forma a[i][j]

#Primeiro irei criar um algoritmo para pivotamento.

#TODAS AS ROTINAS RECEBEM UMA MATRIZ GENERICA nx(n+1), isto é, 
#a matriz de coeficientes junto do vetor das constantes.
#Basicamente, ela é capaz de resolver sistemas L.I

def pivotamento_parcial(matriz):
#    print("Matriz Inicial\n")
#    print(matriz,"\n")
#    print("Pivotamento Parcial\n")
    for i in range(np.shape(matriz)[0]): #so percorre linhas porque estamos interessados apenas no elemento da diagonal
        valor_maximo,pos=max_val(np.abs(matriz[:,i])) # EM MODULO
        if(i<pos): #Essa condicao evita desorganizar linhas ja pivotadas
            aux =np.copy(matriz[i]) #importante fazer a copia para que aux nao #sofra modificacao
            matriz[i] = matriz[pos]
            matriz[pos] = aux
#            print(matriz,"\n")
    return(matriz)

#Agora vou criar algoritmo para gerar matriz triangular superior:

def triangular_superior(matriz):
    matriz = pivotamento_parcial(matriz)
#    print("Matriz Triangular superior\n")
    for i in range(np.shape(matriz)[0]-1): #aqui percorremos as colunas
        for j in range(i,np.shape(matriz)[0]-1): #Aqui percorremos as linhas
            aux=matriz[j+1][i]/matriz[i][i] #Aqui calculamos o coeficiente aux
            matriz[j+1] = matriz[j+1]-matriz[i]*aux #Aqui somamos a linha i na linha j e substituimos
#            print(matriz,"\n")
    return(matriz)
            
#Vou criar o algorítimo para resolver a equação fazendo as substituicoes
def resol_matr_trian(matriz_t_s):
    linhas = np.shape(matriz_t_s)[0]
    vet_sol = np.zeros(linhas)
    for i in range(1,linhas+1):          
        aux=matriz_t_s[linhas-i][linhas] #Note que aqui, estamos percorrendo o #vetor para tras
        for j in range(1,i+1): #A cada iteracao, incrementamos o valor de aux  #com as solucoes ja obtidas
            aux += -matriz_t_s[linhas-i][linhas-j]*vet_sol[linhas-j] 
        vet_sol[linhas-i] = aux/matriz_t_s[linhas-i][linhas-i] 
    return(vet_sol)


# -----RETORNANDO SAÍDAS----- #
    
print("Questão 1.a: O vetor coluna solução será: \n[X1,X2,X3] =",
      np.round( resol_matr_trian(triangular_superior(eq_1_a)), 2) )

print("\nQuestão 1.b: A matriz de Leontief será:\n",np.round(L_M_1,2))

print("\nQuestão 1.c: O vetor coluna solução será: \n[X1,X2,X3] =",
      np.round( resol_matr_trian(triangular_superior(eq_1_c)), 2) )

print("\nQuestão 2:")

print("\n Os níveis de produção para 1958 foram:")
print(np.round( resol_matr_trian(triangular_superior(eq_1958)), 2) )

print("\n Os níveis de produção para 1964 foram:")
print(np.round( resol_matr_trian(triangular_superior(eq_1964)), 2) )

print("\n Questão 3: A matriz de Leontief será:\n",np.round(L_M_3,6))
